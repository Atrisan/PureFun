grammar PureFun extends de.monticore.literals.Literals, de.monticore.expressions.CommonExpressions {

interface Type;

interface Definition;

interface Statement;

ReturnType implements Type = "Void" | Type;

TypeParameter = "<" (Type || ",")+ ">";

FunctionParameters = "(" (FunktionParameter || ",")* ")";

FunktionParameter = Type TypeParameter? Name;

scope Module
    = "module" Name "{"	Definition*	"}";

Variable implements Definition, Statement
	= Type Name TypeParameter? ("=" Expression)?;

AssignStatement implements Statement 
	= left:Name "=" right:Expression;

Function implements Definition 
	= Generic? "fun" Name FunctionParameters BlockStatement;

DataStructure implements Definition
 = Generic?	"data" Name "{" Variable* "}";

IfStatement implements Statement
	= "if" "(" condition:Expression ")" thenStatement:BlockStatement ("else" elseStatement:( BlockStatement | IfStatement ) )? ;

// Loops

ForStatement implements Statement
    = "for" ForControl BlockStatement;

interface ForControl;

CommonForControl implements ForControl
    = ForInit? ";" condition:Expression? ";" (Expression || ",")*
    ;

ForInit
    = (Expression || ",")+
    ;

WhileStatement implements Statement
    = "while" condition:Expression BlockStatement;

AsyncExpression implements Expression
	= "async" CallExpression;

AsyncStatement implements Statement
	= "async" BlockStatement;

BlockStatement implements Statement
 = "{" Statement* "}";

Generic = "template" TypeParameter ;


/*=================================================================*/

  BooleanAndOpExpressionDiff implements Expression <120>, InfixExpression =
	left:Expression operator:"and" right:Expression;

  BooleanOrOpExpressionDiff implements Expression <117>, InfixExpression =
	left:Expression operator:"or" right:Expression;

/*=================================================================*/
}
