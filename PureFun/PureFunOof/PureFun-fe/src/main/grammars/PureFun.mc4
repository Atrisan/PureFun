grammar PureFun extends de.monticore.literals.Literals, de.monticore.expressions.CommonExpressions {

interface Type;

interface Definition;

interface Statement;

ReturnType implements Type = "Void" | Type;

TypeParameter = "<" (Type || ",") ">"

FunctionParameter = "(" (Type Name || ",") ")";

scope Module =
	"module" Name "{"
			Definition*
	"}";

Variable implements Definition, Statement
	= Type Name ("=" Expression)?

AssignStatement implements Statement 
	= left:Name "=" right:Expression
;

Function implements Definition 
	= Generic? "fun" Name Arguments BlockStatement
;

DataStructure implements Definition
 = Generic?	"data" Name "{" Variable* "}"
;

IfStatement implements Statement
	= "if" "(" condition:Expression ")" thenStatement:BlockStatement ("else" elseStatement:( BlockStatement | IfStatement ) )?
;

ForStatement implements Statement; //TODO

WhileStatement implements Statement; //TODO

AsyncExpression implements Expression
	= "async" CallExpression
;

AsyncStatement implements Statement
	= "async" BlockStatement
;

BlockStatement implements Statement
 = "{" Statement* "}"
;

Generic = "template" TypeParameter 


/*=================================================================*/

  BooleanAndOpExpressionDiff implements Expression <120>, InfixExpression =
	left:Expression operator:"and" right:Expression;

  BooleanOrOpExpressionDiff implements Expression <117>, InfixExpression =
	left:Expression operator:"or" right:Expression;

/*=================================================================*/
}
