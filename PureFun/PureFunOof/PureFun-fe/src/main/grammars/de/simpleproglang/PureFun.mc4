package de.simpleproglang;

grammar PureFun extends de.monticore.literals.Literals,
                        de.monticore.expressions.ExpressionsBasis,
                        de.monticore.expressions.CommonExpressions {
    symbol scope Module
         = "module" Name "{" Definition* "}";

    interface Type;

    TypeName implements Type = Name;

    ListType implements Type = "[" Type "]";

    MapType implements Type= "[" keyType:Type "," valueType:Type "]";

    NamedTupleType implements Type = "(" (NamedTuple || ",")* ")";

    NamedTuple
        = (Name ":")? Type;

    ListExpression implements Expression
        = "[" (Expression || ",")* "]";

    MapExpression implements Expression
        = "{" (MapKeyValuePair || ",")* "}";

    MapKeyValuePair
        = key:Expression ":" value:Expression;

    TupleExpression implements Expression
        = "(" (Expression || ",")* ")";

    interface Definition;

    interface Statement;

    /*=================================================================*/
    /*                         DEFINITIONS                             */
    /*=================================================================*/

    symbol Variable implements Definition
        = Type Name ("=" Expression)?;

    FunctionParameters
        = "(" (FunctionParameter || ",")* ")";

    FunctionParameter
        = Type Name;

    Function implements Definition
        = "fun" Name FunctionParameters ":" Type BlockStatement;

    DataStructure implements Definition
     = "data" Name "{" Variable* "}";

    /*=================================================================*/
    /*                    CONTROL STATEMENTS                           */
    /*=================================================================*/

    IfStatement implements Statement
        = "if" condition:Expression thenStatement:BlockStatement ("else" elseStatement:ElseStatement )? ;

    ElseStatement
        = BlockStatement | IfStatement;

    ReturnStatement implements Statement
        = "return" returnExpression:Expression?;

    ForStatement implements Statement
        = "for" ForControl BlockStatement;

    interface ForControl;

    CommonForControl implements ForControl
        = ForInit? ";" condition:Expression? ";" (Expression || ",")*;

    ForEachControl implements ForControl
        = Name "in" Expression;

    ForInit
        = (ForInitEx || ",")+;

    ForInitEx
        = Expression | Variable;

    WhileStatement implements Statement
        = "while" condition:Expression BlockStatement;

    AsyncExpression implements Expression
        = "async" Expression Arguments;

    AsyncStatement implements Statement
        = "async" BlockStatement;

    symbol scope BlockStatement implements Statement
        = "{" (Statement | Expression | Variable)* "}";

    ExtLiteral = Literal;

    /*=================================================================*/
    /*                    OPERATOR EXPRESSIONS                         */
    /*=================================================================*/

    AssignmentExpression implements Expression
        = left:Name "=" right:Expression;

    BooleanAndOpExpressionDiff implements Expression <120>, InfixExpression
        = left:Expression operator:"and" right:Expression;

    BooleanOrOpExpressionDiff implements Expression <117>, InfixExpression
        = left:Expression operator:"or" right:Expression;


    LengthExpression implements Expression
        = "#" Expression;

    InExpression implements Expression
        = left:Expression "in" right:Expression;

    MapValueExpression implements Expression
        = "$" Expression;

    MapKeyExpression implements Expression
        = "!" Expression;

    IndexAccessExpression implements Expression
        = Expression "[" index:Expression "]";

    ConcatExpression implements Expression
        = left:Expression "++" (right:Expression)?;

}
