package de.simpleproglang;

grammar PureFun extends de.monticore.literals.Literals,
                        de.monticore.expressions.ExpressionsBasis,
                        de.monticore.expressions.CommonExpressions {
    symbol scope Module
         = "module" Name "{" Definition* "}";

    interface Type;

    TypeName implements Type <170> = Name;

    ListType implements Type <170> = "[" Type "]";

    MapType implements Type <170> = "[" keyType:Type "," valueType:Type "]";

    NamedTupleType implements Type <170> = "<" (NamedTuple || ",")* ">";

    NamedTuple
        = (Name ":")? Type;

    ListExpression implements Expression <160>
        = "[" (Expression || ",")* "]";

    MapExpression implements Expression <160>
        = "{" (MapKeyValuePair || ",")* "}";

    MapKeyValuePair
        = key:Expression ":" value:Expression;

    TupleExpression implements Expression <160>
        = "<" (Expression || ",")* ">";

    interface Definition;

    interface Statement;

    /*=================================================================*/
    /*                         DEFINITIONS                             */
    /*=================================================================*/

    symbol Variable implements Definition <800>
        = Name ":"? Type ("=" Expression)?;

    FunctionParameters
        = "(" (FunctionParameter || ",")* ")";

    FunctionParameter
        = Name ":"? Type;

    symbol Function implements Definition
        = "fun" Name FunctionParameters ":" Type BlockStatement;

    DataStructure implements Definition
     = "data" Name "{" Variable* "}";

    /*=================================================================*/
    /*                    CONTROL STATEMENTS                           */
    /*=================================================================*/

    IfStatement implements Statement
        = "if" condition:Expression thenStatement:BlockStatement ("else" elseStatement:ElseStatement )? ;

    ElseStatement
        = BlockStatement | IfStatement;

    ReturnStatement implements Statement
        = "return" returnExpression:Expression?;

    ForStatement implements Statement
        = "for" ForControl BlockStatement;

    interface ForControl;

    CommonForControl implements ForControl
        = ForInit? ";" condition:Expression? ";" (Expression || ",")*;

    ForEachControl implements ForControl
        = Name "in" Expression;

    ForInit
        = (ForInitEx || ",")+;

    ForInitEx
        = Expression | Variable;

    WhileStatement implements Statement
        = "while" condition:Expression BlockStatement;

    AsyncExpression implements Expression
        = "async" Expression Arguments;

    AsyncStatement implements Statement
        = "async" BlockStatement;

    scope BlockStatement implements Statement
        = "{" BlockElement* "}";

    BlockElement
        = (Statement | Variable | Expression);

    ExtLiteral = Literal;

    LitExpression implements Expression <380> = Literal;

    /*=================================================================*/
    /*                    OPERATOR EXPRESSIONS                         */
    /*=================================================================*/

    PrintExpression implements Expression
        = "print" "(" PrintElement* ")";

    PrintElement = StringLiteral | "{" Expression "}";

    AssignmentExpression implements Expression <200>
        = left:Expression "=" right:Expression;

    BooleanAndOpExpressionDiff implements Expression <120>, InfixExpression
        = left:Expression operator:"and" right:Expression;

    BooleanOrOpExpressionDiff implements Expression <117>, InfixExpression
        = left:Expression operator:"or" right:Expression;


    LengthExpression implements Expression
        = "#" Expression;

    InExpression implements Expression
        = left:Expression "in" right:Expression;

    MapValueExpression implements Expression
        = "$" Expression;

    MapKeyExpression implements Expression
        = "!" Expression;

    IndexAccessExpression implements Expression <1>
        = Expression "[" index:Expression "]";

    ConcatExpression implements Expression
        = left:Expression "++" (right:Expression)?;

    DecrementExpression implements Expression
        = left:Expression "--";

    AssignmentByDecreaseExpression implements Expression
        = left:Expression "-=" right:Expression;

    AssignmentByMultiplyExpression implements Expression
        = left:Expression "*=" right:Expression;

    AssignmentByDivisionExpression implements Expression
        = left:Expression "/=" right:Expression;

    AssignmentByRemainderExpression implements Expression
        = left:Expression "%=" right:Expression;

}
