package de.simpleproglang;

grammar PureFun extends de.monticore.literals.Literals,
                        de.monticore.expressions.ExpressionsBasis,
                        de.monticore.expressions.CommonExpressions {
    symbol scope Module
                = "module" Name "{"	Definition*	"}";

    Type = Name | "[" Type "]"
                | "[" Type "," Type "]"
                | "(" (NamedTuple || ",")* ")";

    NamedTuple
        = (Name ":")? Type;

    interface Definition;

    interface Statement;

    ListExpression implements Expression
        = "[" (Expression || ",")* "]";

    MapExpression implements Expression
        = "{" (MapKeyValuePair || ",")* "}";

    MapKeyValuePair = key:Expression ":" value:Expression;

    TupleExpression implements Expression
        = "(" (Expression || ",")* ")";

    FunctionParameters = "(" (FunctionParameter || ",")* ")";

    FunctionParameter = Type Name;

    Variable implements Definition
        = Type Name ("=" Expression)?;

    AssignStatement implements Expression
        = left:Name "=" right:Expression;

    Function implements Definition
        = "fun" Name FunctionParameters ":" Type BlockStatement;

    DataStructure implements Definition
     = "data" Name "{" Variable* "}";

    IfStatement implements Statement
        = "if" condition:Expression thenStatement:BlockStatement ("else" elseStatement:ElseStatement )? ;

    ElseStatement
        = BlockStatement | IfStatement;

    ReturnStatement implements Statement
        = "return" Expression;

    /*=================================================================*/
    /*                    CONTROL STATEMENTS                           */
    /*=================================================================*/

    ForStatement implements Statement
        = "for" ForControl BlockStatement;

    interface ForControl;

    CommonForControl implements ForControl
        = ForInit? ";" condition:Expression? ";" (Expression || ",")*;

    ForEachControl implements ForControl
        = Name "in" Expression;

    ForInit
        = (ForInitEx || ",")+;

    ForInitEx
        = Expression | Variable;

    WhileStatement implements Statement
        = "while" condition:Expression BlockStatement;

    AsyncExpression implements Expression
        = "async" Expression Arguments;

    AsyncStatement implements Statement
        = "async" BlockStatement;

    BlockStatement implements Statement
     = "{" (Statement | Expression | Variable)* "}";


    /*=================================================================*/

  BooleanAndOpExpressionDiff implements Expression <120>, InfixExpression =
    left:Expression operator:"and" right:Expression;

  BooleanOrOpExpressionDiff implements Expression <117>, InfixExpression =
    left:Expression operator:"or" right:Expression;

    /*=================================================================*/

    ExtLiteral = Literal;

    LengthExpression implements Expression = "#" Expression;

    InExpression implements Expression = left:Expression "in" right:Expression;

    MapValueExpression implements Expression = "$" Expression;

    MapKeyExpression implements Expression = "!" Expression;

    IndexAccessExpression implements Expression = Expression "[" index:Expression "]";

    ConcatExpression implements Expression = left:Expression "++" (right:Expression)?;

}
