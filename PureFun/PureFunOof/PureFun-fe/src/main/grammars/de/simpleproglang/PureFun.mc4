package de.simpleproglang;

grammar PureFun extends de.monticore.literals.Literals,
        de.monticore.expressions.ExpressionsBasis,
        de.monticore.expressions.CommonExpressions {

    symbol scope Module
            = "module" Name "{"	Definition*	"}";

    Type = Name;

    interface Definition;

    interface Statement;

    FunctionParameters = "(" (FunctionParameter || ",")* ")";

    FunctionParameter = Type Name;

    Variable implements Definition, Statement
        = Type Name ("=" Expression)?;

    AssignStatement implements Statement
        = left:Name "=" right:Expression;

    Function implements Definition
        = "fun" Name FunctionParameters ":" Type BlockStatement;

    DataStructure implements Definition
     = "data" Name "{" Variable* "}";

    IfStatement implements Statement
        = "if" "(" condition:Expression ")" thenStatement:BlockStatement ("else" elseStatement:ElseStatement )? ;

    ElseStatement
        = BlockStatement | IfStatement;

    ReturnStatement implements Statement
        = "return" Expression;

    // Loops

    ForStatement implements Statement
        = "for" ForControl BlockStatement;

    interface ForControl;

    CommonForControl implements ForControl
        = ForInit? ";" condition:Expression? ";" (Expression || ",")*
        ;

    ForInit
        = (Expression || ",")+
        ;

    WhileStatement implements Statement
        = "while" condition:Expression BlockStatement;

    AsyncExpression implements Expression
        = "async" Expression Arguments;

    AsyncStatement implements Statement
        = "async" BlockStatement;

    BlockStatement implements Statement
     = "{" Statement* "}";


    /*=================================================================*/

  BooleanAndOpExpressionDiff implements Expression <120>, InfixExpression =
    left:Expression operator:"and" right:Expression;

  BooleanOrOpExpressionDiff implements Expression <117>, InfixExpression =
    left:Expression operator:"or" right:Expression;

    /*=================================================================*/

    ExtLiteral = Literal;
}
