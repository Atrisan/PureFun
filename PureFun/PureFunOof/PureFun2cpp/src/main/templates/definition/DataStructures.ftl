<#assign gh = glex.getGlobalVar("pfHelper")>
//Generated by Oof Generator Data Structure ${ast.getName()}
<#compress>
${signature("ast", "modulename")}

<#assign constructorParam="">
<#assign initConstructor="">
<#list ast.getVariableList() as variable>
    <#assign constructorParam="${constructorParam}${gh.printType(variable.getType())} ${variable.getName()}">
    <#assign initConstructor="${initConstructor}_${variable.getName()}(${variable.getName()})">
    <#if variable_has_next>
        <#assign constructorParam="${constructorParam}, ">
        <#assign initConstructor="${initConstructor}, ">
    </#if>
</#list>
</#compress>
namespace ${modulename} {

class ${ast.getName()} {
public:
    ${ast.getName()}(${constructorParam})
        : ${initConstructor} {
    }

    virtual ~${ast.getName()}() = default;
    ${ast.getName()}(const ${ast.getName()}&) noexcept = default;
    ${ast.getName()}(${ast.getName()}&&) noexcept = default;
    ${ast.getName()}& operator=(${ast.getName()}&) noexcept = default;
    ${ast.getName()}& operator=(${ast.getName()}&&) noexcept = default;

<#list ast.getVariableList() as variable>
    ${gh.printType(variable.getType())} const & get_${variable.getName()}() const noexcept { return _${variable.getName()}; }
</#list>

private:
<#list ast.getVariableList() as variable>
    ${includeArgs("definition/Variable.ftl", variable, "_")}
</#list>
};

}