<#assign genHelper = glex.getGlobalVar("pfHelper")> <#-- GeneratorHelper -->
//Generated by Oof Generator Data Structure ${ast.Name}

${signature(modulename, sym)}

<#assign constructorParam="">
<#assign initConstructor="">
<#list ast.getVariableList() as variable>
    <#assign constructorParam="${constructorParam}${printType(sym.getType(variable))} ${variable.Name}">
    <#assign initConstructor="${initConstructor}_${variable.Name}(${variable.Name})">
    <#if variable_has_next>
        <#assign constructorParam="${constructorParam}, ">
        <#assign initConstructor="${initConstructor}, ">
    </#if>
</#list>

namespace ${modulename} {

class ${ast.Name} {
public:
    static ${ast.Name}() {}
    ${ast.Name}(${constructorParam}) : ${initConstructor} {
    }

    virtual ~${ast.Name}() = default;
    ${ast.Name}(const ${ast.Name}&) noexcept = default;
    ${ast.Name}(${ast.Name}&&) noexcept = default;
    ${ast.Name}& operator=(${ast.Name}&) noexcept = default;
    ${ast.Name}& operator=(${ast.Name}&&) noexcept = default;

<#list ast.getVariableList() as variable>
    ${printType(sym.getType(variable))} const & get_${variable.Name}() const noexcept { return ${variable.Name}; }
</#list>

    static const & ${ast.Name} get_default const noexcept { return default_obj; }

private:
<#list ast.getVariableList() as variable>
    ${includeArgs("Variable.ftl", variable, "_", sym)}
</#list>
    static ${ast.Name} const default_obj;
};

}