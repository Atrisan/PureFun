<#assign gh = glex.getGlobalVar("pfHelper")>
//Generated by Oof Generator Data Structure ${ast.getName()}
<#compress>
${signature("ast", "modulename","parent")}

<#assign mods=parent.getDefinitionList()>
<#assign constructorParam="">
<#assign initConstructor="">

#ifndef ${gh.toCAPS(ast.getName())}_HXX
#define ${gh.toCAPS(ast.getName())}_HXX
#include <map>
#include <vector>
#include <tuple>
#include <cstdint>
#include <string>

<#assign subDefinitions=gh.getPrevDefs(ast, parent)>

<#list subDefinitions as definition>
    <#if gh.isDataStruct(definition)>
        <#if !gh.isSameStruct(definition, ast)>
#include "${definition.getName()}.hxx"
        </#if>
    </#if>
</#list>

<#list ast.getVariableList() as variable>
    <#assign constructorParam="${constructorParam}${gh.printType(variable.getType())} ${variable.getName()}">
    <#assign initConstructor="${initConstructor}_${variable.getName()}(${variable.getName()})">
    <#if variable_has_next>
        <#assign constructorParam="${constructorParam}, ">
        <#assign initConstructor="${initConstructor}, ">
    </#if>
</#list>
</#compress>

//namespace ${modulename} {

class ${ast.getName()} {
public:
    ${ast.getName()}(${constructorParam})
        : ${initConstructor} {
    }

    virtual ~${ast.getName()}() = default;
    ${ast.getName()}(const ${ast.getName()}&) = default;
    ${ast.getName()}(${ast.getName()}&&) noexcept = default;
    ${ast.getName()}& operator=(${ast.getName()}&) = default;
    ${ast.getName()}& operator=(${ast.getName()}&&) noexcept = default;

<#list ast.getVariableList() as variable>
    ${gh.printType(variable.getType())} const & get_${variable.getName()}() const noexcept { return _${variable.getName()}; }
</#list>

private:
<#list ast.getVariableList() as variable>
    ${includeArgs("definition/Variable.ftl", variable, "_")}
</#list>
};

//}
#endif