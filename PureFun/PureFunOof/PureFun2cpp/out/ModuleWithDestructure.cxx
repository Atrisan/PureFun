/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PureFun Oof.                                  */
/*********************************************************************/

#include <map>
#include <vector>
#include <tupel>
#include <cstdint>
#include <string>


/*********************************************************************/
/*        Data Structure inclusions                                  */
/*        Generated by PureFun Oof.                                  */
/*********************************************************************/
//#include <TestStruct.hxx>
//Generated by Oof Generator Data Structure TestDF
namespace TestDF {

class TestStruct {
private:
    static TestStruct() {}

public:
    TestStruct(int32_t age, double weight, bool bool)
        : _age(age), _weight(weight), _bool(bool) {
    }

    virtual ~TestStruct() = default;
    TestStruct(const TestStruct&) noexcept = default;
    TestStruct(TestStruct&&) noexcept = default;
    TestStruct& operator=(TestStruct&) noexcept = default;
    TestStruct& operator=(TestStruct&&) noexcept = default;

    int32_t const & get_age() const noexcept { return _age; }
    double const & get_weight() const noexcept { return _weight; }
    bool const & get_bool() const noexcept { return _bool; }

    static const & TestStruct get_default() const noexcept { return default_obj; }

private:
    int32_t _age ;
    double _weight ;
    bool _bool ;
    static TestStruct const default_obj;
};

}



/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PureFun Oof.                                  */
/*********************************************************************/
    int32_t global_in = 0;
    std::map<int32_t, int64_t> map {{1, 1}, {2, 2}};
    std::vector<int32_t> list {1, 2, 3, 4};


/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PureFun Oof.                                  */
/*********************************************************************/
    
int32_t test(std::string key, std::map<int32_t, int64_t> insert, std::vector<int32_t> list) {
std::map<std::string, int32_t> map {{String, 2}};
std::vector<int32_t> te {6};
return map.getAt(String)
}
    
int32_t main() {
int32_t j = 0;
std::map<int32_t, int64_t> map {{1, 1}, {2, 2}};
std::vector<int32_t> list {1, 2, 3};
std::tuple<int32_t, int64_t> tuple {1, 2};
for ( int32_t i = 0; i < 10; i++) {
print(string)
}
test(String)
if(global_in == 0)
{
}
}
